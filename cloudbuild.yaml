steps:
- id: create-terraform-plans
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: '/bin/sh'
  secretEnv: ['TF_VAR_vpc_network_name', 'BUCKET_NAME']
  env:
  - 'TF_VAR_project_id=$PROJECT_ID'
  args:
  - '-c'
  - |
    set -e;
    for team_dir in firewall-rules/*; do
      if [ -d "$team_dir" ] && [ -f "$team_dir/rules.yaml" ]; then
        export team=$(basename "$team_dir")
        echo $team
        team_config=$(cat team-config.yaml)
        rules_config=$(cat $team_dir/rules.yaml)
        echo "Processing Firewall Rules for $team"

        # Apply configuration
        cd ./terraform/module
        terraform init
        terraform workspace select $team || terraform workspace new $team
        terraform plan -out=./$BUILD_ID.$team.tfplan -var="team_config_content=$team_config" -var="yaml_content=$rules_config"
        terraform show -json ./$BUILD_ID.$team.tfplan > ./$BUILD_ID.$team.json
        cd -
      fi
    done
# Terraform Validator step can go here, which would block deployment
- id: apply-terraform
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: '/bin/sh'
  secretEnv: ['TF_VAR_vpc_network_name', 'BUCKET_NAME']
  env:
  - 'TF_VAR_project_id=$PROJECT_ID'
  args:
  - '-c'
  - |
    set -e;
    cd ./terraform/module
    for plan in *.tfplan; do
      export team=$(basename "$plan" | cut -d. -f2)
      terraform workspace select $team
      echo "Applying changes for $team"
      terraform apply -auto-approve "$plan" 
    done
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_NUMBER/secrets/shared-vpc-name/versions/latest
    env: TF_VAR_vpc_network_name
  - versionName: projects/$PROJECT_NUMBER/secrets/firewall-state-bucket/versions/latest
    env: BUCKET_NAME
